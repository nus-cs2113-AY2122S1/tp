@startuml
'https://plantuml.com/sequence-diagram
!include Styles.puml

box console COLOR_CONSOLE_SEGMENT
participant ":EditInstrumentParser" as EditInstrumentParser COLOR_CONSOLE
end box

group sd Get new edited parameters from user \nand create a hashmap associating the parameter type and its new value

activate EditInstrumentParser

EditInstrumentParser -> EditInstrumentParser: getEditedParameters({"name"}, stockToEdit)
activate EditInstrumentParser

EditInstrumentParser -> EditInstrumentParser: editNameParameter("stock", {"name"})
note left: editNameParameters check if the name is entered \nthen prompts user to provide a new name.\nMethod loop until a valid name is given.
activate EditInstrumentParser

alt parameters to edit does not include "name"
else
loop until valid name is entered or abort is called
EditInstrumentParser -> EditInstrumentParser: getUserInput()
activate EditInstrumentParser
EditInstrumentParser --> EditInstrumentParser: return new name
deactivate EditInstrumentParser
end
end

EditInstrumentParser --> EditInstrumentParser
deactivate EditInstrumentParser

EditInstrumentParser -> EditInstrumentParser: editXYZParameter({"name"})
note left: This represents similar methods that does the same\nas the one above but for other parameters.\nXYZ represents all other parameters of\ncurrent price, sentiment, past return, entry price,\nexit price, expiry, remark, status.
activate EditInstrumentParser

alt parameters to edit does not include parameter "XYZ"
else
loop until valid parameter is entered or abort is called
EditInstrumentParser -> EditInstrumentParser: getUserInput()
activate EditInstrumentParser
EditInstrumentParser --> EditInstrumentParser: return new value of parameter
deactivate EditInstrumentParser
end
end
EditInstrumentParser --> EditInstrumentParser
deactivate EditInstrumentParser

EditInstrumentParser --> EditInstrumentParser
deactivate EditInstrumentParser

end

@enduml

